Clark Mackey log file setup v3 10/29/25

Business problem I am trying to solve: Help Augment (or other Devs) not get lost by giving it just the right context, minimizing token waste, and reserving more of the context window for building stuff. Do all that without me lifting a finger.

I implemented this because my log files (which previously helped a lot) were getting large and Auggie was losing its mind more quickly than expected as the context window filled up. When I start a new thread, Auggie works great again, but needs to get up to speed on context of the project and also use as few tokens as possible to get there. 

TL;DR: Put my files in a folder and ask Augment to implement log_file_how_to.md using the example files in the folder. Then write the Augment rules to call Augment's attention to the 4 document system. I don't keep log_file_how_to.md in an always-on instruction because that also wastes tokens - this is why I include several Augment rules instead.

If you have existing logs, you can ask Augment to plan work to convert them to this model. Backup your files before kicking off work and review that plan closely, because you hope to rely on the revised files for a long time. 

Augment rules (customize to your install):

RULE 1

update-planning-docs (Manual)
When updating planning documentation (CHANGELOG, DEVLOG, or PRD), follow the process defined in `docs/planning/log_file_how_to.md`.

Key files:
- CHANGELOG: `docs/planning/CHANGELOG.md`
- DEVLOG: `docs/planning/DEVLOG.md`
- PRD: `docs/specs/PRD-Claude-Skills-Factory.md`

RULE 2

status-update (Manual)
When I say "status update", analyze these files and provide a brief summary (3-5 bullet points) of where we are and what's next:
- PRD: `docs/specs/PRD-Claude-Skills-Factory.md`
- CHANGELOG: `docs/planning/CHANGELOG.md`
- DEVLOG: `docs/planning/DEVLOG.md`

Focus on: current version, active phase, recent changes, and next priorities.

RULE 3

log-file-maintenance-rule (Always) 
# Log File Maintenance Rules

- **CHANGELOG Current Context:** Update daily (version, branch, phase, stack, objectives)
- **DEVLOG Current Context:** Update daily (version, branch, phase, stack, objectives, ADRs)
- **CHANGELOG entries:** Update after every commit (single-line format)
- **DEVLOG entries:** Update when Epics/milestones/decisions complete (Situation/Challenge/Decision/Impact/Files)
- **PRD:** Update daily minimum, immediately for requirement changes
- **Multi-agent:** Always read Current Context before starting work, update after finishing
- **Archive Older Updates:** When CHANGELOG or DEVLOG exceed 10k tokens, copy entries older than 2 weeks to separate archive files in /planning/archive (each current log file keeps 2 weeks of details)

See: [Full Workflow Guide](docs/planning/log_file_how_to.md)

END OF AUGMENT RULES

You can store these files anywhere you like, just cross link them on relative paths near the beginning of each file and look at them once in a blue moon. My process does suggest a file structure in the log_file_how_to.md

changelog_template.md
devlog_template.md
adr_template.md
adr_how_to.md (this can become a readme file in the directory you put ADRs in)
log_file_how_to.md (this explains how my system works; customize this so it says the right stuff about your project if you keep it in the project)

The changelog and devlog get archived regularly to a separate archive folder. Could be any interval you want to set. 

All these parts should be in your github and are frequently updated.

Once installed, it is a very good idea to ask Augment to check the setup and make sure all the internal links are correct.

Results of my first pass, updating my old devlog to meet my new template standards:

Quality Check Example, after having Augment rewrite my devlog to meet the v3 standard:

The story is still there:

You can still understand WHY the decision was made
You can still follow the journey from problem to solution
You can still learn from the insights
You can still find the relevant files
But now it's:

86% shorter (2,029 → 285 lines)
93% fewer tokens (~45k → ~3.3k tokens)
Scannable in seconds instead of minutes
Leaves 95% of AI context window for actual work

Changes you should experience if this is working as intended:
Augment getting lost less often
No longer having to write code documentation by hand except when you really want
Having better documentation available to you in the future
Augment telling you it is updating planning files or archiving old logs.
You telling Augment to @update-planning-docs.md and you see it making multiple file updates
ADR files getting created after you planned something / built something 
Log files that occupy a tiny amount of tokens
Faster start times on new threads when you ask @status-update.md

